/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as AuthRouteRouteImport } from './routes/auth/route'
import { Route as AuthedRouteRouteImport } from './routes/_authed/route'
import { Route as RouteRouteImport } from './routes/route'
import { Route as InviteCodeRouteImport } from './routes/invite/$code'
import { Route as AuthSignUpRouteImport } from './routes/auth/sign-up'
import { Route as AuthSignInRouteImport } from './routes/auth/sign-in'
import { Route as ApiTrpcSplatRouteImport } from './routes/api/trpc.$'
import { Route as ApiAuthSplatRouteImport } from './routes/api/auth.$'
import { Route as AuthedChannelsAtmeRouteRouteImport } from './routes/_authed/channels/@me/route'
import { Route as AuthedChannelsServerIdRouteRouteImport } from './routes/_authed/channels/$serverId/route'
import { Route as AuthedChannelsAtmeIndexRouteImport } from './routes/_authed/channels/@me/index'
import { Route as AuthedChannelsAtmeDmIdRouteImport } from './routes/_authed/channels/@me/$dmId'
import { Route as AuthedChannelsServerIdChannelIdRouteRouteImport } from './routes/_authed/channels/$serverId/$channelId/route'
import { Route as AuthedChannelsServerIdChannelIdIndexRouteImport } from './routes/_authed/channels/$serverId/$channelId/index'

const AuthRouteRoute = AuthRouteRouteImport.update({
  id: '/auth',
  path: '/auth',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthedRouteRoute = AuthedRouteRouteImport.update({
  id: '/_authed',
  getParentRoute: () => rootRouteImport,
} as any)
const RouteRoute = RouteRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const InviteCodeRoute = InviteCodeRouteImport.update({
  id: '/invite/$code',
  path: '/invite/$code',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthSignUpRoute = AuthSignUpRouteImport.update({
  id: '/sign-up',
  path: '/sign-up',
  getParentRoute: () => AuthRouteRoute,
} as any)
const AuthSignInRoute = AuthSignInRouteImport.update({
  id: '/sign-in',
  path: '/sign-in',
  getParentRoute: () => AuthRouteRoute,
} as any)
const ApiTrpcSplatRoute = ApiTrpcSplatRouteImport.update({
  id: '/api/trpc/$',
  path: '/api/trpc/$',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiAuthSplatRoute = ApiAuthSplatRouteImport.update({
  id: '/api/auth/$',
  path: '/api/auth/$',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthedChannelsAtmeRouteRoute = AuthedChannelsAtmeRouteRouteImport.update({
  id: '/channels/@me',
  path: '/channels/@me',
  getParentRoute: () => AuthedRouteRoute,
} as any)
const AuthedChannelsServerIdRouteRoute =
  AuthedChannelsServerIdRouteRouteImport.update({
    id: '/channels/$serverId',
    path: '/channels/$serverId',
    getParentRoute: () => AuthedRouteRoute,
  } as any)
const AuthedChannelsAtmeIndexRoute = AuthedChannelsAtmeIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthedChannelsAtmeRouteRoute,
} as any)
const AuthedChannelsAtmeDmIdRoute = AuthedChannelsAtmeDmIdRouteImport.update({
  id: '/$dmId',
  path: '/$dmId',
  getParentRoute: () => AuthedChannelsAtmeRouteRoute,
} as any)
const AuthedChannelsServerIdChannelIdRouteRoute =
  AuthedChannelsServerIdChannelIdRouteRouteImport.update({
    id: '/$channelId',
    path: '/$channelId',
    getParentRoute: () => AuthedChannelsServerIdRouteRoute,
  } as any)
const AuthedChannelsServerIdChannelIdIndexRoute =
  AuthedChannelsServerIdChannelIdIndexRouteImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => AuthedChannelsServerIdChannelIdRouteRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof RouteRoute
  '/auth': typeof AuthRouteRouteWithChildren
  '/auth/sign-in': typeof AuthSignInRoute
  '/auth/sign-up': typeof AuthSignUpRoute
  '/invite/$code': typeof InviteCodeRoute
  '/channels/$serverId': typeof AuthedChannelsServerIdRouteRouteWithChildren
  '/channels/@me': typeof AuthedChannelsAtmeRouteRouteWithChildren
  '/api/auth/$': typeof ApiAuthSplatRoute
  '/api/trpc/$': typeof ApiTrpcSplatRoute
  '/channels/$serverId/$channelId': typeof AuthedChannelsServerIdChannelIdRouteRouteWithChildren
  '/channels/@me/$dmId': typeof AuthedChannelsAtmeDmIdRoute
  '/channels/@me/': typeof AuthedChannelsAtmeIndexRoute
  '/channels/$serverId/$channelId/': typeof AuthedChannelsServerIdChannelIdIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof RouteRoute
  '/auth': typeof AuthRouteRouteWithChildren
  '/auth/sign-in': typeof AuthSignInRoute
  '/auth/sign-up': typeof AuthSignUpRoute
  '/invite/$code': typeof InviteCodeRoute
  '/channels/$serverId': typeof AuthedChannelsServerIdRouteRouteWithChildren
  '/api/auth/$': typeof ApiAuthSplatRoute
  '/api/trpc/$': typeof ApiTrpcSplatRoute
  '/channels/@me/$dmId': typeof AuthedChannelsAtmeDmIdRoute
  '/channels/@me': typeof AuthedChannelsAtmeIndexRoute
  '/channels/$serverId/$channelId': typeof AuthedChannelsServerIdChannelIdIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof RouteRoute
  '/_authed': typeof AuthedRouteRouteWithChildren
  '/auth': typeof AuthRouteRouteWithChildren
  '/auth/sign-in': typeof AuthSignInRoute
  '/auth/sign-up': typeof AuthSignUpRoute
  '/invite/$code': typeof InviteCodeRoute
  '/_authed/channels/$serverId': typeof AuthedChannelsServerIdRouteRouteWithChildren
  '/_authed/channels/@me': typeof AuthedChannelsAtmeRouteRouteWithChildren
  '/api/auth/$': typeof ApiAuthSplatRoute
  '/api/trpc/$': typeof ApiTrpcSplatRoute
  '/_authed/channels/$serverId/$channelId': typeof AuthedChannelsServerIdChannelIdRouteRouteWithChildren
  '/_authed/channels/@me/$dmId': typeof AuthedChannelsAtmeDmIdRoute
  '/_authed/channels/@me/': typeof AuthedChannelsAtmeIndexRoute
  '/_authed/channels/$serverId/$channelId/': typeof AuthedChannelsServerIdChannelIdIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/auth'
    | '/auth/sign-in'
    | '/auth/sign-up'
    | '/invite/$code'
    | '/channels/$serverId'
    | '/channels/@me'
    | '/api/auth/$'
    | '/api/trpc/$'
    | '/channels/$serverId/$channelId'
    | '/channels/@me/$dmId'
    | '/channels/@me/'
    | '/channels/$serverId/$channelId/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/auth'
    | '/auth/sign-in'
    | '/auth/sign-up'
    | '/invite/$code'
    | '/channels/$serverId'
    | '/api/auth/$'
    | '/api/trpc/$'
    | '/channels/@me/$dmId'
    | '/channels/@me'
    | '/channels/$serverId/$channelId'
  id:
    | '__root__'
    | '/'
    | '/_authed'
    | '/auth'
    | '/auth/sign-in'
    | '/auth/sign-up'
    | '/invite/$code'
    | '/_authed/channels/$serverId'
    | '/_authed/channels/@me'
    | '/api/auth/$'
    | '/api/trpc/$'
    | '/_authed/channels/$serverId/$channelId'
    | '/_authed/channels/@me/$dmId'
    | '/_authed/channels/@me/'
    | '/_authed/channels/$serverId/$channelId/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  RouteRoute: typeof RouteRoute
  AuthedRouteRoute: typeof AuthedRouteRouteWithChildren
  AuthRouteRoute: typeof AuthRouteRouteWithChildren
  InviteCodeRoute: typeof InviteCodeRoute
  ApiAuthSplatRoute: typeof ApiAuthSplatRoute
  ApiTrpcSplatRoute: typeof ApiTrpcSplatRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/auth': {
      id: '/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authed': {
      id: '/_authed'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthedRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof RouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/invite/$code': {
      id: '/invite/$code'
      path: '/invite/$code'
      fullPath: '/invite/$code'
      preLoaderRoute: typeof InviteCodeRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/sign-up': {
      id: '/auth/sign-up'
      path: '/sign-up'
      fullPath: '/auth/sign-up'
      preLoaderRoute: typeof AuthSignUpRouteImport
      parentRoute: typeof AuthRouteRoute
    }
    '/auth/sign-in': {
      id: '/auth/sign-in'
      path: '/sign-in'
      fullPath: '/auth/sign-in'
      preLoaderRoute: typeof AuthSignInRouteImport
      parentRoute: typeof AuthRouteRoute
    }
    '/api/trpc/$': {
      id: '/api/trpc/$'
      path: '/api/trpc/$'
      fullPath: '/api/trpc/$'
      preLoaderRoute: typeof ApiTrpcSplatRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/auth/$': {
      id: '/api/auth/$'
      path: '/api/auth/$'
      fullPath: '/api/auth/$'
      preLoaderRoute: typeof ApiAuthSplatRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authed/channels/@me': {
      id: '/_authed/channels/@me'
      path: '/channels/@me'
      fullPath: '/channels/@me'
      preLoaderRoute: typeof AuthedChannelsAtmeRouteRouteImport
      parentRoute: typeof AuthedRouteRoute
    }
    '/_authed/channels/$serverId': {
      id: '/_authed/channels/$serverId'
      path: '/channels/$serverId'
      fullPath: '/channels/$serverId'
      preLoaderRoute: typeof AuthedChannelsServerIdRouteRouteImport
      parentRoute: typeof AuthedRouteRoute
    }
    '/_authed/channels/@me/': {
      id: '/_authed/channels/@me/'
      path: '/'
      fullPath: '/channels/@me/'
      preLoaderRoute: typeof AuthedChannelsAtmeIndexRouteImport
      parentRoute: typeof AuthedChannelsAtmeRouteRoute
    }
    '/_authed/channels/@me/$dmId': {
      id: '/_authed/channels/@me/$dmId'
      path: '/$dmId'
      fullPath: '/channels/@me/$dmId'
      preLoaderRoute: typeof AuthedChannelsAtmeDmIdRouteImport
      parentRoute: typeof AuthedChannelsAtmeRouteRoute
    }
    '/_authed/channels/$serverId/$channelId': {
      id: '/_authed/channels/$serverId/$channelId'
      path: '/$channelId'
      fullPath: '/channels/$serverId/$channelId'
      preLoaderRoute: typeof AuthedChannelsServerIdChannelIdRouteRouteImport
      parentRoute: typeof AuthedChannelsServerIdRouteRoute
    }
    '/_authed/channels/$serverId/$channelId/': {
      id: '/_authed/channels/$serverId/$channelId/'
      path: '/'
      fullPath: '/channels/$serverId/$channelId/'
      preLoaderRoute: typeof AuthedChannelsServerIdChannelIdIndexRouteImport
      parentRoute: typeof AuthedChannelsServerIdChannelIdRouteRoute
    }
  }
}

interface AuthedChannelsServerIdChannelIdRouteRouteChildren {
  AuthedChannelsServerIdChannelIdIndexRoute: typeof AuthedChannelsServerIdChannelIdIndexRoute
}

const AuthedChannelsServerIdChannelIdRouteRouteChildren: AuthedChannelsServerIdChannelIdRouteRouteChildren =
  {
    AuthedChannelsServerIdChannelIdIndexRoute:
      AuthedChannelsServerIdChannelIdIndexRoute,
  }

const AuthedChannelsServerIdChannelIdRouteRouteWithChildren =
  AuthedChannelsServerIdChannelIdRouteRoute._addFileChildren(
    AuthedChannelsServerIdChannelIdRouteRouteChildren,
  )

interface AuthedChannelsServerIdRouteRouteChildren {
  AuthedChannelsServerIdChannelIdRouteRoute: typeof AuthedChannelsServerIdChannelIdRouteRouteWithChildren
}

const AuthedChannelsServerIdRouteRouteChildren: AuthedChannelsServerIdRouteRouteChildren =
  {
    AuthedChannelsServerIdChannelIdRouteRoute:
      AuthedChannelsServerIdChannelIdRouteRouteWithChildren,
  }

const AuthedChannelsServerIdRouteRouteWithChildren =
  AuthedChannelsServerIdRouteRoute._addFileChildren(
    AuthedChannelsServerIdRouteRouteChildren,
  )

interface AuthedChannelsAtmeRouteRouteChildren {
  AuthedChannelsAtmeDmIdRoute: typeof AuthedChannelsAtmeDmIdRoute
  AuthedChannelsAtmeIndexRoute: typeof AuthedChannelsAtmeIndexRoute
}

const AuthedChannelsAtmeRouteRouteChildren: AuthedChannelsAtmeRouteRouteChildren =
  {
    AuthedChannelsAtmeDmIdRoute: AuthedChannelsAtmeDmIdRoute,
    AuthedChannelsAtmeIndexRoute: AuthedChannelsAtmeIndexRoute,
  }

const AuthedChannelsAtmeRouteRouteWithChildren =
  AuthedChannelsAtmeRouteRoute._addFileChildren(
    AuthedChannelsAtmeRouteRouteChildren,
  )

interface AuthedRouteRouteChildren {
  AuthedChannelsServerIdRouteRoute: typeof AuthedChannelsServerIdRouteRouteWithChildren
  AuthedChannelsAtmeRouteRoute: typeof AuthedChannelsAtmeRouteRouteWithChildren
}

const AuthedRouteRouteChildren: AuthedRouteRouteChildren = {
  AuthedChannelsServerIdRouteRoute:
    AuthedChannelsServerIdRouteRouteWithChildren,
  AuthedChannelsAtmeRouteRoute: AuthedChannelsAtmeRouteRouteWithChildren,
}

const AuthedRouteRouteWithChildren = AuthedRouteRoute._addFileChildren(
  AuthedRouteRouteChildren,
)

interface AuthRouteRouteChildren {
  AuthSignInRoute: typeof AuthSignInRoute
  AuthSignUpRoute: typeof AuthSignUpRoute
}

const AuthRouteRouteChildren: AuthRouteRouteChildren = {
  AuthSignInRoute: AuthSignInRoute,
  AuthSignUpRoute: AuthSignUpRoute,
}

const AuthRouteRouteWithChildren = AuthRouteRoute._addFileChildren(
  AuthRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  RouteRoute: RouteRoute,
  AuthedRouteRoute: AuthedRouteRouteWithChildren,
  AuthRouteRoute: AuthRouteRouteWithChildren,
  InviteCodeRoute: InviteCodeRoute,
  ApiAuthSplatRoute: ApiAuthSplatRoute,
  ApiTrpcSplatRoute: ApiTrpcSplatRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
